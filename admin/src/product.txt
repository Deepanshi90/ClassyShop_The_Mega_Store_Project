{/* <div className="card bg-white shadow-md rounded-md p-5 flex items-center justify-between">

        <h1 className='font-[700] text-[20px] text-gray-800 '>Products</h1>

        <div className="col w-[25%] ml-auto flex items-center gap-3 justify-end">

          {
            sortedIds?.length !== 0 && <Button variant='contained' className='btn-sm' size='small' color='error' onClick={deleteMultipleProduct}>Delete</Button>
          }
          <Button className='btn-blue !bg-green-600 btn-sm btn flex items-center gap-2'><BiExport />Export</Button>
          <Button className='btn-blue btn-sm' onClick={() => context.setIsOpenFullScreenPanel({
            open: true,
            model: 'Add Product'
          })}>Add Product</Button>
        </div>
      </div> */}

      <div className="card my-4 shadow-md sm:rounded-lg bg-white">

        <div className="flex items-center w-full px-5 justify-between gap-4 dashboardFilters">
          <div className="col w-[15%] ">

            <h4 className='font-[600] text-[13px] mb-2'>Category By</h4>

            {
              context?.catData?.length !== 0 &&
              <Select
                style={{ zoom: '80%' }}
                labelId="demo-simple-select-label"
                id="productCatDrop"
                className='w-full '
                size='small'
                value={productCat}
                label="Product Category"
                onChange={handleChangeProductCat}
              >
                {
                  context?.catData?.map((cat, index) => {
                    return (
                      <MenuItem value={cat?._id} >{cat?.name}</MenuItem>
                    )
                  })
                }
              </Select>
            }
          </div>

          <div className="col w-[15%] ">

            <h4 className='font-[600] text-[13px] mb-2'>Sub Category By</h4>

            {
              context?.catData?.length !== 0 &&
              <Select
                style={{ zoom: '80%' }}
                labelId="demo-simple-select-label"
                id="productCatDrop"
                className='w-full '
                size='small'
                value={productSubCat}
                label="Product Sub Category"
                onChange={handleChangeProductSubCat}
              >
                {
                  context?.catData?.map((cat, index) => {
                    return (
                      cat?.children?.length !== 0 && cat?.children?.map((subCat, index_) => {
                        return (
                          <MenuItem value={subCat?._id} >{subCat?.name}</MenuItem>
                        )
                      }
                      ))
                  }

                  )
                }
              </Select>
            }
          </div>

          <div className="col w-[18%] ">

            <h4 className='font-[600] text-[13px] mb-2'>Third Level Sub Category By</h4>

            {
              context?.catData?.length !== 0 &&
              <Select
                style={{ zoom: '80%' }}
                labelId="demo-simple-select-label"
                id="productCatDrop"
                className='w-full '
                size='small'
                value={productThirdLevelCat}
                label="Product Sub Category"
                onChange={handleChangeProductThirdLevelCat}
              >
                {
                  context?.catData?.map((cat) => {
                    return (
                      cat?.children?.length !== 0 &&
                      cat?.children?.map((subCat) => {
                        return (
                          subCat?.children?.length !== 0 &&
                          subCat?.children?.map((thirdLevelCat, index) => {
                            return (
                              <MenuItem value={thirdLevelCat?._id} key={index}>
                                {thirdLevelCat?.name}
                              </MenuItem>
                            );
                          })
                        );
                      })
                    );
                  })
                }
              </Select>
            }
          </div>
          <div className="col w-[20%] ml-auto search_box">
            <SearchBox  searchQuery={searchQuery}
            setSearchQuery={setSearchQuery}/>
          </div>
        </div>

        <div class="relative overflow-x-auto mt-5 pb-5 overflow-y-auto max-h-[450px]">
          <table class="w-full text-sm text-left text-black bg-white" >
            <thead class="text-xs text-black uppercase bg-gray-100" >
              <tr>
                <th scope="col" className="px-6 py-3 pr-0 w-[10%]">
                  <div className="w-[60px]">
                    <Checkbox {...label} size='small' onChange={handleSelectAll}
                      checked={productData?.length > 0 ? productData.every((item) => item.checked) : false}
                    />
                  </div>
                </th>
                <th scope="col" class="px-2 py-3 whitespace-nowrap ">
                  Product
                </th>
                <th scope="col" class="px-6 py-3 whitespace-nowrap">
                  CATEGORY
                </th>
                <th scope="col" class="px-6 py-3 whitespace-nowrap">
                  SUB CATEGORY
                </th>

                <th scope="col" class="px-6 py-3 whitespace-nowrap">
                  Third Level SUB CATEGORY
                </th>

                <th scope="col" class="px-6 py-3 whitespace-nowrap">
                  PRICE
                </th>
                <th scope="col" class="px-6 py-3 whitespace-nowrap">
                  Sales
                </th>
                <th scope="col" class="px-6 py-3 whitespace-nowrap">
                  Rating
                </th>
                <th scope="col" class="px-6 py-3 whitespace-nowrap">
                  ACTION
                </th>

              </tr>
            </thead>

            <tbody>
              {

                productData?.length !== 0 ? <>
                  {
                    productData?.length !== 0 && productData?.map((product, index) => {
                      return (
                        <tr className="odd:bg-white odd:dark:bg-gray-50 even:bg-gray-50 even:dark:bg-gray-100 border-b dark:border-gray-300" key={index}>
                          <td className="px-6 pr-0 py-2">
                            <div className="w-[60px]">
                              <Checkbox {...label} size='small' checked={product.checked === true ? true : false}
                                onChange={(e) => handleCheckboxChange(e, product._id, index)}
                              />
                            </div>
                          </td>

                          <td className="px-2 py-2">
                            <div className="flex items-center gap-4 w-[300px]">
                              <div className="img w-[65px] h-[65px] rounded-md overflow-hidden group">
                                <Link to={`/product/${product?._id}`}>
                                  <LazyLoadImage
                                    className='w-full h-full object-cover group-hover:scale-105 transition-all'
                                    effect="blur"
                                    wrapperProps={{
                                      // If you need to, you can tweak the effect transition using the wrapper style.
                                      style: { transitionDelay: "1s" },
                                    }}
                                    alt="image"
                                    src={product?.images[0]}

                                  />
                                </Link>
                              </div>

                              <div className="info w-[75%]">
                                <h3 className='font-[600] text-[12px] leading-4 hover:text-[#3872fa]' >
                                  <Link to={`/product/${product?._id}`}>{product?.name}
                                  </Link></h3>

                                <span className='text-[12px]'>{product?.brand}</span>
                              </div>
                            </div>
                          </td>

                          <td className="px-6 py-2">{product?.catName}</td>
                          <td className="px-6 py-2">{product?.subCat} </td>
                          <td className="px-6 py-2">{product?.thirdsubCat} </td>
                          <td className="px-6 py-2">
                            <div className="flex gap-1 flex-col">
                              <span className='oldPrice line-through leading-3 text-gray-500 text-[15px] font-[500]'>&#x20b9;{product?.oldPrice}</span>
                              <span className="price text-[#3872fa] text-[15px] font-[600]">&#x20b9;{product?.price}</span>
                            </div>
                          </td>
                          <td className="px-6 py-2">
                            <p className='text-[14px] w-[100px]'><span className='font-[600]'>{product?.sale}</span> sale</p>
                            {/* <Progress value={80} type="warning" /> */}
                          </td>

                          <td className="px-6 py-2">
                            <p className='text-[14px] w-[100px]'>
                              {/* <span className='font-[600]'>{product?.sale}</span> sale */}
                              <Rating name="half-rating" readOnly size='small' defaultValue={product?.rating} precision={0.5} />
                            </p>
                            {/* <Progress value={80} type="warning" /> */}
                          </td>


                          <td className="px-6 py-2">
                            <div className="flex items-center gap-1">
                              <TooltipMUI title="Edit Product" placement="top">
                                <Button className='!w-[30px] !h-[30px] !min-w-[30px] !bg-[#f1f1f1] !rounded-full !text-[#000] !border !border-[rgba(0,0,0,0.3)] hover:!bg-[rgba(0,0,0,0.4)]' onClick={() =>
                                  context.setIsOpenFullScreenPanel({
                                    open: true,
                                    model: 'Edit Product',
                                    id: product?._id
                                  })
                                } >
                                  <AiOutlineEdit className='text-[rgba(0,0,0,0.7) !text-[20px] ' /></Button>
                              </TooltipMUI>
                              <Link to={`/product/${product?._id}`}>
                                <TooltipMUI title="View Product Details" placement="top">
                                  <Button className='!w-[30px] !h-[30px] !min-w-[30px] !bg-[#f1f1f1] !rounded-full !text-[#000] !border !border-[rgba(0,0,0,0.3)] hover:!bg-[rgba(0,0,0,0.4)]' >
                                    <FaRegEye className='text-[rgba(0,0,0,0.7) !text-[18px] ' /></Button>
                                </TooltipMUI>
                              </Link>

                              <TooltipMUI title="Remove Product" placement="top">
                                <Button className='!w-[30px] !h-[30px] !min-w-[30px] !bg-[#f1f1f1] !rounded-full !text-[#000] !border !border-[rgba(0,0,0,0.3)] hover:!bg-[rgba(0,0,0,0.4)]' onClick={() => deleteProduct(product?._id)}>
                                  <GoTrash className='text-[rgba(0,0,0,0.7) !text-[18px] ' /></Button>
                              </TooltipMUI>
                            </div>
                          </td>

                        </tr>
                      )
                    })
                  }

                </> :
                  <>
                    <tr>
                      <td colSpan={8}>
                        <div className="flex items-center justify-center w-full min-h-[400px]"><CircularProgress color="inherit" /></div>
                      </td>
                    </tr>
                  </>


              }

            </tbody>
          </table>
        </div>

      </div>





      change password
       <section className="relative w-full min-h-screen bg-white">
      {/* Header */}
      <header className="w-full fixed top-0 left-0 px-3 py-2 flex items-center justify-between z-50 bg-white/80 backdrop-blur-md shadow-sm">
        <Link to="/">
          <img
            src="https://demos.codezeel.com/prestashop/PRS21/PRS210502/img/logo-1691412328.jpg"
            alt="logo"
            className="w-[120px] sm:w-[150px] md:w-[200px]"
          />
        </Link>

        <div className="hidden sm:flex items-center gap-2">
          <NavLink to="/login" exact={true} activeClassName="isActive">
            <Button className='!rounded-full !text-black !px-3 sm:!px-4 py-1 flex items-center gap-1 border border-gray-300 hover:border-black text-xs sm:text-sm'>
              <CgLogIn className='text-base' />
              <span>Login</span>
            </Button>
          </NavLink>

          <NavLink to="/sign-up" exact={true} activeClassName="isActive">
            <Button className='!rounded-full !text-black !px-3 sm:!px-4 py-1 flex items-center gap-1 border border-gray-300 hover:border-black text-xs sm:text-sm'>
              <FaRegUser className='text-sm' />
              <span>Sign Up</span>
            </Button>
          </NavLink>
        </div>
      </header>

      {/* Background Image */}
      <img
        src="./background.avif"
        alt="Background"
        className="absolute top-0 left-0 w-full h-full object-cover opacity-30 z-0"
      />

      {/* OTP Container */}
      <div className="relative z-50 pt-[90px] pb-10 px-3 flex justify-center">
        <div className="loginBox card w-full max-w-xs bg-white rounded-xl shadow-md px-5 py-7">
          <div className="flex flex-col items-center justify-center text-center">
            <img src="./verify2.png" alt="verify" className="w-[60px] sm:w-[80px]" />
            <h1 className="text-xl sm:text-2xl font-bold mt-3">
              Welcome Back!<br />
              Please Verify your Account.
            </h1>
            <p className="text-xs sm:text-sm mt-3">
              OTP sent to <span className="text-[#3872fa] font-semibold break-all">{localStorage.getItem("userEmail") || "your email"}</span>
            </p>
          </div>

          <form onSubmit={verifyOTP} className="mt-5">
            <div className="flex justify-center">
              <OtpBox length={6} onChange={handleOtpChange} />
            </div>

            <div className="mt-5">
              <Button type="submit" className="btn-blue w-full text-sm py-2">
                {isLoading ? <CircularProgress color="inherit" size={20} /> : 'Verify OTP'}
              </Button>
            </div>
          </form>
        </div>
      </div>
    </section>